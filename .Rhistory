install.packages("signal")
help wget
wget
setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
getwd()
# install.packages("rstudioapi") # run this if it's your first time using it to install
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print( getwd() )
destfile="data.zip"
fileURL <-
"https://www.dropbox.com/s/d12x5vknrk9yek1/data.zip"
if (!file.exists(destfile)) {
setInternet2(TRUE)
download.file(fileURL ,destfile,method="auto") }
if (!file.exists(destfile)) {
download.file(fileURL ,destfile,method="auto") }
if (!file.exists(destfile)) {
wget(fileURL)
##load("./data/samsungData.rda")
}
fileURL <-
"https://www.dropbox.com/s/d12x5vknrk9yek1/data.zip?raw=1"
if (!file.exists(destfile)) {
download.file(fileURL ,destfile,method="auto") }
unzip(archivodestino)
library(rstudioapi) # cargo una libreria para configurar el path automaticamente
current_path <- getActiveDocumentContext()$path # obtengo el path donde está el script
setwd(dirname(current_path )) # cambio el path
archivodestino="data.zip" # nombre de archivo a descargar
unzip(archivodestino)
unzip('data.zip')
unz('data.zip')
help unz
unz help
unzip("data.zip")
unzip("data.zip")
install.packages("seewave")
install.packages("tuneR")
library(seewave)
library(tuneR)
sound <- readWave("data/0001.wav")
sound$sample.rate
sound <- readWave("data/0001.wav", header=TRUE)
sound$sample.rate
sound$channels
sound$bits
sound$samples
sound
file.names <- dir("data", pattern="wav$")
head(file.names)
play(sound)
setWavPlayer('C:/Program Files/VideoLAN/VLC/vlc.exe')
play(sound)
play(data/sound)
play(sound)
data(sound)
sound
sound <- readWave("data/0001.wav")
play(sound)
setWavPlayer('C:\Program Files\VideoLAN\VLC\vlc.exe')
setWavPlayer("C:\Program Files\VideoLAN\VLC\vlc.exe")
setWavPlayer("C:/Program Files/VideoLAN/VLC/vlc.exe")
play(sound)
data(sound)
sound
oscillo(sound)
spec(sound)
datos <- specprop(sound)
p <- periodogram(sound, width=512, overlap=512 * 0.75)
plot(p)
library(signal)
specgram(sound,n=512,overlap = 512*0.75)
specgram(sound,fs=44100,n=512,overlap = 512*0.75)
?specgram
sound@samp.rate
f <- sound@samp.rate
spg <- specgram
sound
spg <- specgram(sound,Fs=f,n=512,overlap=512*0.75)
spg <- specgram(sound,Fs=f,n=100,overlap=512*0.75)
spg <- specgram(sound@left,Fs=f,n=100,overlap=512*0.75)
spg <- specgram(sound@left,Fs=f,n=512,overlap=512*0.75)
str(spg)
plot(spg,col=gray((512:0)/512))
oscillo(sound)
f <- sound@samp.rate
spg <- specgram(sound,Fs=f,n=512,overlap=512*0.75)
plot(spg,col=gray((512:0)/512))
View(spg)
fix(spg$S)
fix(spg)
spectro(sound,ovlp=75)
sound <- readWave("data/0002.wav", header=TRUE)
spectro(sound,ovlp=75)
sound <- readWave("data/0005.wav", header=TRUE)
spectro(sound,ovlp=75)
f <- sound@samp.rate
sound <- readWave("data/0005.wav", header=TRUE)
sound <- readWave("data/0005.wav")
spectro(sound,ovlp=75)
sound <- readWave("data/0001.wav")
spectro(sound,ovlp=75)
sound <- readWave("data/0010.wav")
spectro(sound,ovlp=75)
?downsample
View(p)
View(sound)
downsample(sound,5512)
spectro(sound,ovlp=75)
sound <- readWave("data/0010.wav")
spectro(sound,ovlp=75)
sound <- readWave("data/0010.wav")
downsample(sound,5512)
spectro(sound,ovlp=75)
?spectro
spectro(sound,ovlp=75,norm=TRUE)
spectro(sound,ovlp=75,norm=FALSE)
spectro(sound,ovlp=75)
?flim
??flim
spectro(sound,ovlp=75,flim(2,6))
spectro(sound,ovlp=75,flim=c(2,6))
spectro(sound,ovlp=75,flim=c(0,6))
spectro(sound,ovlp=75,flim=c(0,1))
spectro(sound,ovlp=75,flim=c(0,8))
spectro(sound,ovlp=75,flim=c(0,0.8))
sound <- readWave("data/0010.wav")
downsample(sound,5512)
spectro(sound,ovlp=75,flim=c(0,0.8))
sound <- readWave("data/0010.wav")
spectro(sound,ovlp=75,flim=c(0,0.8))
spectro(sound,ovlp=75, wl=512,flim=c(0,0.8))
spectro(sound,ovlp=75, wl=256,flim=c(0,0.8))
spectro(sound,ovlp=75, wl=1024,flim=c(0,0.8))
spectro(sound,ovlp=75, wl=1024,flim=c(0,0.65))
sound <- readWave("data/0001.wav")
spectro(sound,ovlp=75, wl=1024,flim=c(0,0.65))
phaseplot(sound)
phaseplot(sound,dim=2)
phaseplot(sound,dim=2)
clear
?clear
??clear
phaseplot(sound,dim=2)
library(rstudioapi) # cargo una libreria para configurar el path automaticamente
current_path <- getActiveDocumentContext()$path # obtengo el path donde está el script
setwd(dirname(current_path )) # cambio el path
library(seewave)
library(tuneR)
library(signal)
sound <- readWave("data/0001.wav")
phaseplot(sound,dim=2)
par(mfrow=c(4,3), # 4 * 3 figure plate organisation
mar=c(4.5,4,1,1), # margins
lwd=0.5)
phaseplot(sound,dim=2)
?par
file.names <- dir("data", pattern="wav$")
fix(file.names)
file.names(1)
file.names[1]
file.names[1:5]
sounds <- file.names[1:4]
oscillo(sound)
spectro(sound,ovlp=75, wl=1024,flim=c(0,0.65))
oscillo(sound)
par(c(1,1))
oscillo(sound)
par(c(2,1))
par(mfrow=c(2,1))
oscillo(sound)
oscillo(sound)
par(mfrow=c(2,1),mar=c(4.5,4,1,1))
oscillo(sound)
oscillo(sound)
par(mfrow=c(1,1),mar=c(4.5,4,1,1))
oscillo(sound)
phaseplot(sound,dim=2)
flim <- c(0,.6)
col <- "blue"
par(mfrow=c(4,3), # 4 * 3 figure plate organisation
mar=c(4.5,4,1,1), # margins
lwd=0.5) # line width for all graphics
# ’for’ loop to plot successively
# the oscillogram, the frequency spectrum and the phase portrait
# of each sound stored in the list ’sounds’
for(i in 1:length(sounds)){
oscillo(sounds[[i]], colwave=col, cexlab=0.7)
spec(sounds[[i]], flim=flim, col=col)
phaseplot(sounds[[i]], dim=2, col=col)
}
soundfiles <- file.names[1:4]
for(i in 1:length(soundfiles)){
sounds[[i]] <- readWave(soundfiles[[i]])
}
soundfiles+'asd'
soundfiles+string('asd')
soundfiles+str('asd')
sounds[[i]] <- readWave(paste("data", soundfiles[[i]], sep="/"))
paste("data", soundfiles[[i]], sep="/")
paste("data", soundfiles[[2]], sep="/")
readWave(paste("data", soundfiles[[2]], sep="/"))
sounds <- rep(NA,length(soundfiles))
for(i in 1:length(soundfiles)){
sounds[[i]] <- readWave(paste("data", soundfiles[[i]], sep="/"))
}
sounds[1]
sounds[[1]
]
sounds[i] <- readWave(paste("data", soundfiles[[i]], sep="/"))
clear sounds
rm sounds
rm(sounds)
sounds[i] <- readWave(paste("data", soundfiles[[i]], sep="/"))
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
soundfiles <- file.names[runif(4,0,1000)]
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
#soundfiles <- file.names[runif(4,0,1000)]
soundfiles <- c(22,32,43,46)
#soundfiles <- file.names[runif(4,0,1000)]
soundfiles <- file.names[c(22,32,43,46)]
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=3, col=col)
}
install.packages("rgl")
library(rgl)
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=3, col=col)
}
phaseplot(sound, dim=3, col=col)
phaseplot(sound, dim=4, col=col)
sound = readWave(paste("data", file.names[1], sep="/"))
phaseplot(sound, dim=3, col=col)
sound = readWave(paste("data", file.names[1024], sep="/"))
phaseplot(sound, dim=3, col=col)
sound = readWave(paste("data", file.names[22], sep="/"))
phaseplot(sound, dim=3, col=col)
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
spec(sound, flim=flim, col=col)
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
#soundfiles <- file.names[runif(4,0,1000)]
soundfiles <- file.names[c(1023,765,43,2354)]
par(mfrow=c(4,3), # 4 * 3 figure plate organisation
mar=c(4.5,4,1,1), # margins
lwd=0.5) # line width for all graphics
for(i in 1:length(soundfiles)){
sound = readWave(paste("data", soundfiles[[i]], sep="/"))
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim, col=col)
phaseplot(sound, dim=2, col=col)
}
