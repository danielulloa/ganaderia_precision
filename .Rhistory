library(rstudioapi) # carga una libreria para configurar el path automaticamente
current_path <- getActiveDocumentContext()$path # el path donde estÃ¡ el script
setwd(dirname(current_path )) # cambia el path
# librerias a utilizar
library(seewave)
library(tuneR)
library(signal)
library(rgl)
# obtiene datos https://metadata.fundacionsadosky.org.ar/competition/14/
archivodestino="data.zip" # nombre de archivo a descargar
archivoURL <-
"https://www.dropbox.com/s/d12x5vknrk9yek1/data.zip?raw=1"
# verifica si existe el archivo en el directorio y extrae
if (!file.exists(archivodestino)) {
download.file(archivoURL ,archivodestino,method="auto")
unzip(archivodestino)
}
#generar un vector con la ubicacion relativa de los archivos
file.names <- dir("data", pattern="wav$")
file.names <- paste("data", file.names, sep="/")
# elegir 3 archivos
soundfiles <- file.names[runif(3,0,length(file.names))]
# carga un sonido
sound <- readWave(file.names[1])
# grafico de oscilograma y espectograma
par(mfrow=c(1,1), mar=c(5,5,1,1))
oscillo(sound)
flim <- c(0,.65)
spectro(sound,ovlp=75, wl=1024,flim=flim)
col <- "blue"
par(mfrow=c(3,3),mar=c(4,4,1,1))
for(i in 1:length(soundfiles)){
sound = readWave(soundfiles[i])
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim)
phaseplot(sound, dim=2, col=col)
}
# diagrama de fase de un tono puro, outlier del dataset
sound = readWave(file.names[22])
phaseplot(sound, dim=3, col=col)
# analisis estadistico de los archivos etiquetados para entrenamiento
train <- read.csv("train_labels.csv")
#generar un vector con la ubicacion relativa de los archivos
file.names <- dir("data", pattern="wav$")
file.names <- paste("data", file.names, sep="/")
# elegir 3 archivos
soundfiles <- file.names[runif(3,0,length(file.names))]
# carga un sonido
sound <- readWave(file.names[1])
# grafico de oscilograma y espectograma
par(mfrow=c(1,1), mar=c(5,5,1,1))
oscillo(sound)
flim <- c(0,.65)
spectro(sound,ovlp=75, wl=1024,flim=flim)
col <- "blue"
par(mfrow=c(3,3),mar=c(4,4,1,1))
for(i in 1:length(soundfiles)){
sound = readWave(soundfiles[i])
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim)
phaseplot(sound, dim=2, col=col)
}
# diagrama de fase de un tono puro, outlier del dataset
sound = readWave(file.names[22])
phaseplot(sound, dim=3, col=col)
# analisis estadistico de los archivos etiquetados para entrenamiento
train <- read.csv("train_labels.csv")
fpromedio <- c()
fkurt <- c()
intdb <- c()
hshannon <- c()
# analisis espectral para determinar frecuencia promedio, entropia de shannon
for(i in 1:nrow(train)){
sound <- readWave(file.names[train$filename[i]])
f=sound@samp.rate
tmp<-meanspec(sound,f=22050,plot=FALSE)
fpromedio[i] <- specprop(tmp,f=f)$mean
fkurt[i] <- specprop(tmp,f=f)$kurtosis
intdb[i] <- meandB(tmp, level ="IL")
hshannon[i] <- sh(tmp, alpha = "shannon")
}
# concatena los vectores generados al dataframe
train=data.frame(train,fkurt,fpromedio,intdb,hshannon)
train$label <- factor(train$label,
levels = c(0,1,2),
labels = c("bite", "chew", "chew-bite"))
ggplot(train, aes(train$fpromedio, train$hshannon, color=train$label)) +
geom_point()+
xlim(350,2000)
library(ggplot2)
ggplot(train, aes(train$fpromedio, train$hshannon, color=train$label)) +
geom_point()+
xlim(350,2000)
col <- "blue"
par(mfrow=c(3,3),mar=c(4,4,1,1))
for(i in 1:length(soundfiles)){
sound = readWave(soundfiles[i])
oscillo(sound, colwave=col, cexlab=0.7)
spec(sound, flim=flim)
phaseplot(sound, dim=2, col=col)
}
